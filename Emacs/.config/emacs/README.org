#+TITLE: Emacs configuration
#+AUTHOR: Jean-Baptiste Loutfalla
#+PROPERTY: header-args :tangle config.el
#+auto_tangle: t
#+STARTUP: showeverything
#+LANGUAGE: en
#+OPTIONS: toc:nil num:nil

* Special thanks
First of all, I would like to thanks Uncle Dave (known as [[https://www.youtube.com/channel/UCDEtZ7AKmwS0_GNJog01D2g][Uncle Dave]] on YouTube or [[https://github.com/daedreth/UncleDavesEmacs][daedreth]] on GitHub)
and his Emacs Tutorial series which helped me a lot to use Emacs.
This configuration file is based on the one he made and from different
other people as [[https://github.com/munen/emacs.d][Alain M. Lafon]] or [[https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/configuration.org][Harry R. Schwartz]].

* Dependencies
** Spelling checker
*** From package manager
- =aspell=, for English spelling (don't forget to install dictionaries).

** Programming
*** From package manager
- =clang=, for C/C++ completion and =rtags=.
- [[https://gnu.org/software/global/][=global=]], for completion using =ggtags=.
- =sbcl=, for CLisp completion and REPL.
- =racer= and =rustfmt=, for Rust completion and format.
- =python-epc=, for use =python-jedi=.
- =python-jedi=, for Python completion.
- =ghci=, for Haskell inferior processus.
- =stylish-haskell=, for Haskell auto-formatting.

** Exporting
*** From the package manager
+ =texlive= (or any other LaTeX distribution), for exportations using LaTeX.
+ =pygmentize=, for code highlighting when export to PDF.
 
* Some notes
** On use-package some more
I utilize =use-package= to handle downloading and configuring other packages painlessly.
With =init.el= written the way it is, Emacs checks for the presence of =use-package=
on launch and downloads it and installs if necessary.

** On the format of the configuration
As you may have notices, this is the configuration file itself.
This configuration is written in =org-mode=.
On launch, this file is being sourced into =$XDG_CONFIG_HOME/init.el=,
the prosed will be automatically stripped out and the remaining
=config.el= is parsed.

This is also the reason why your org-mode configuration should never
be called =init.org=.

* Setting personal informations
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Jean-Baptiste Loutfalla"
        user-mail-address "jb.loutfalla@orange.fr")
#+END_SRC

* Needs at startup
** Activate the MELPA depot
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (setq package-archives '(("gnu"   . "https://elpa.gnu.org/packages/")
                           ("org"   . "https://orgmode.org/elpa/")
                           ("melpa" . "https://melpa.org/packages/")))
  (package-initialize)
#+END_SRC

** Boostrapping =use-package=
#+BEGIN_SRC emacs-lisp
  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC

** Automatic update packages
#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :config
    (setq auto-package-update-delete-old-versions t)
    (auto-package-update-maybe))
#+END_SRC

** Always compile packages and use the newest version compiled
#+BEGIN_SRC emacs-lisp
  (use-package auto-compile
    :config
    (setq load-prefer-newer t)
    (auto-compile-on-load-mode))
#+END_SRC

* Theme
** Color Theme Sanityinc Tomorrow
A nice dark theme.
#+BEGIN_SRC emacs-lisp
  (use-package color-theme-sanityinc-tomorrow
    :defer t
    :config
    (color-theme-sanityinc-tomorrow-night))
#+END_SRC

* Basic Interface Settings
There are some setting that do not depend on packages and are built-in enhancements to UI.
** Looks
*** Disable menus and scrollbars
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

*** Visible bell
#+BEGIN_SRC emacs-lisp
  (setq visible-bell t)
#+END_SRC

*** Set UTF-8 encoding
#+BEGIN_SRC emacs-lisp
  (setq local-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

*** Highlight current line
Uncomment this if you want to highlight the current line when
opening/changing frame.
#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'after-make-frame-functions
  ;;           (lambda (frame)
  ;;             (select-frame frame)
  ;;             (when (display-graphic-p frame)
  ;;               (global-hl-line-mode 1))))
#+END_SRC

*** Cursor position
Show in the mini-buffer the current line and column number of the cursor.
#+BEGIN_SRC emacs-lisp
  (setq line-number-mode t)
  (setq column-number-mode t)
#+END_SRC

*** Allow frames to cover the entire screen
In dwm, sometimes emacs frames does not cover the screen so to make
make it happen we need to change the value of =frame-resize-pixelwise=
to a non-nil value.
#+BEGIN_SRC emacs-lisp
  (setq frame-resize-pixelwise t)
#+END_SRC

*** ANSI colors
In certain modes like =compilation-mode=, ANSI escape sequences does
not work properly.
#+BEGIN_SRC emacs-lisp
  (defun jl/colorize-with-ansi-sequences-buffer ()
    (ansi-color-apply-on-region compilation-filter-start (point)))
  (add-hook 'compilation-filter-hook 'jl/colorize-with-ansi-sequences-buffer)
#+END_SRC

** Functionality
*** Do not create backup files
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
#+END_SRC

*** Change the location of auto-save files to =/tmp=
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory)))
#+END_SRC

*** Always follow symlinks
#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
#+END_SRC

*** Auto revert files on change
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
#+END_SRC

*** Change yes-or-no questions into y-or-n questions
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Async
Use of asynchronous processes wherever it's possible.
#+BEGIN_SRC emacs-lisp
  (use-package async
    :init
    (dired-async-mode 1))
#+END_SRC

*** EasyPG
Allow Emacs to be use for pinentry of GnuPG
#+BEGIN_SRC emacs-lisp
  (use-package pinentry
    :config
    (setq epa-pinentry-mode 'loopback)
    (pinentry-start))
#+END_SRC

* Terminal
** Setting default Shell
For conveniences I prefer to set the Shell with a variable.
#+BEGIN_SRC emacs-lisp
  (defvar jl/my-terminal-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list jl/my-terminal-shell)))
  (ad-activate 'ansi-term)
#+END_SRC

** Keybinding
Since I use dwm and the default keybinding I set to open a terminal is
=S-Return=, I can't use it anymore in Emacs to open a terminal.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<C-return>") 'ansi-term)
#+END_SRC

* Help for use Emacs
** which-key
This package will show you all keybindings possible when you start one.
It can be really useful when you don't remember a long keybinding.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish
    :config
    (which-key-mode))
#+END_SRC

* Minor conveniences
** Minibuffer completion
*** ido
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching t)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC

*** ibuffer
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-use-other-window t)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

*** icircle
#+BEGIN_SRC emacs-lisp
  (icomplete-mode 1)
#+END_SRC

*** smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :init (smex-initialize)
    :bind ("M-x" . smex))
#+END_SRC

** French spelling/grammar checker - Grammalecte
Since I'm a french person, it can be useful to have it.
After installing it, you need to run =flycheck-grammalecte-download-grammalecte=.
#+BEGIN_SRC emacs-lisp
  (setq flycheck-grammalecte-enabled-modes '(org-mode
                                             text-mode
                                             mail-mode
                                             latex-mode))

  (setq flycheck-grammalecte-report-spellcheck nil)
  (setq flycheck-grammalecte-report-apos nil)
  (setq flycheck-grammalecte-report-nbsp nil)

  (use-package flycheck-grammalecte)
#+END_SRC

** Edit/Open the configuration
Simply pressing =C-c e= will open this file. You can also invoke =jl/edit-config=.
#+BEGIN_SRC emacs-lisp
  (defun jl/edit-config ()
    "Edit/Open the config org file (`$XDG_CONFIG_HOME/emacs/README.org')"
    (interactive)
    (when (file-readable-p jl/config-file-org)
      (find-file jl/config-file-org)))

  (global-set-key (kbd "C-c e") 'jl/edit-config)
#+END_SRC

** Reloading the configuration
Simply pressing =C-c r= will reload this file. You can also invoke =jl/config-reload=.
#+BEGIN_SRC emacs-lisp
  (defun jl/config-reload ()
    "Reloads the emacs-lisp config file (`$XDG_CONFIG_HOME/emacs/config.el')"
    (interactive)
    (when (file-readable-p jl/config-file)
      (load jl/config-file)))

  (global-set-key (kbd "C-c r") 'jl/config-reload)
#+END_SRC

** Electric
Enable automatic closing brackets, parentheses, quotation marks, ...
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '((?\{ . ?\})
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?\" . ?\")))
  (electric-pair-mode t)
#+END_SRC

** Rainbow
*** Rainbow mode
Highlights hexadecimal codes that resembles a color in the appropriate color.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :hook (prog-mode)
    :diminish rainbow-mode)
#+END_SRC

*** Rainbow delimiters
Color parentheses and other delimiters depending of their depth.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

** Show parens
Highlights matching parens when the cursor is just behind one of them
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

** Line numbers
Enables relative line numbers for programming-related modes.
#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :hook (prog-mode . linum-relative-mode)
    :diminish
    :config
    (setq linum-relative-current-symbol "")
    (setq linum-relative-backend 'display-line-numbers-mode))
#+END_SRC 

** Sub words
Makes Emacs considers camelCase strings as multiple words.
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC

** Multiple cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :bind (("C-!" . mc/edit-lines)
           ("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)
           ("C-c C-<" . mc/mark-all-like-this)))
  (setq mc/always-run-for-all t)
#+END_SRC

** Replace the selected region
Enables replacing directly a selected region by what you type.
#+BEGIN_SRC emacs-lisp
  (pending-delete-mode t)
#+END_SRC

** Expand region
Expends region from the cursor to the word, sentence, ...
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :bind ("C-q" . er/expand-region))
#+END_SRC

** Tabs indentation and completion
Enables tab completions.
#+BEGIN_SRC emacs-lisp
  (setq tab-always-indent t)
  (add-to-list 'completion-styles 'initials t)
#+END_SRC

** Popup kill-ring
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :bind ("M-y" . popup-kill-ring))
#+END_SRC

** Hide some mode from the modeline
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :config
    (diminish 'linum-relative-mode)
    (diminish 'subword-mode)
    (diminish 'auto-fill-mode)
    (diminish 'abbrev-mode)
    (diminish 'eldoc-mode))
#+END_SRC

** =comment-line= keybinding
The keybinding to apply =comment-line= is =C-x C-;= but when Emacs is
open in a terminal window, this keybind is not achievable so I replace
the binding of the =comment-set-column= in this case.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x ;") 'comment-line)
#+END_SRC

* Project management
** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :bind-keymap ("C-c p" . projectile-command-map)
    :bind ("<f7>" . 'projectile-compile-project)
    :init
    (setq projectile-completion-system 'ido)
    :config
    ;; Directories to ignore
    (add-to-list 'projectile-globally-ignored-directories "build")
    (add-to-list 'projectile-globally-ignored-directories ".cache")

    ;; File suffixes to ignore
    (add-to-list 'projectile-globally-ignored-file-suffixes ".o")
    (add-to-list 'projectile-globally-ignored-file-suffixes ".d")
    (projectile-mode 1))
#+END_SRC

*** Generate =.dir-locals.el= for =cmake-ide=
#+BEGIN_SRC emacs-lisp
  (defun cmake-dir-locals ()
    "Create a .dir-locals.el file at the root of the project which set cmake-ide-build-dir to `PROJECT_ROOT/build'"
    (interactive)
    (let ((s "((nil .
    ((eval . (setq-local cmake-ide-build-dir
                (concat (projectile-project-root)
                        \"build/\"))))))\n")
          (project-dir (projectile-project-root)))
      (if project-dir
          (with-temp-file (concat project-dir ".dir-locals.el") (insert s))
        (message "Not in a project..."))))
#+END_SRC

** Dashboard
#+BEGIN_SRC emacs-lisp
  (defun jl/start-dashboard ()
    "Starts dashboard
  This definition is to be used with `emacs --daemon'"
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 5)
                            (projects . 5)))
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))))

  (use-package dashboard
    :after projectile
    :config
    (setq dashboard-startup-banner
          (concat (getenv "XDG_CONFIG_HOME") "/emacs/img/dashLogo.png")))

  (jl/start-dashboard)
#+END_SRC

* Programming
** GPLv3
Insert the short text of the GPLv3 at the beginning of the file.
#+BEGIN_SRC emacs-lisp
  (defun jl/insert-gpl (description)
    "Insert the brief of the GNU GPLv3."
    (interactive "sShort description: ")
    (setq-local current-year (format-time-string "%Y"))
    (save-excursion
      (beginning-of-buffer)
      (insert
       (format
  "/* %s

     Copyright (C) %s %s <%s>

     This program is free software: you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation, either version 3 of the License, or
     (at your option) any later version.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program. If not, see <http://www.gnu.org/licenses/>. */

  " description current-year user-full-name user-mail-address))))
#+END_SRC

** magit
A pretty great git integration.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status))
#+END_SRC

** yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet-snippets)

  (use-package yasnippet
    :defer t
    :after (yasnippet-snippets)
    :diminish yas-minor-mode
    :config
    (yas-global-mode))
#+END_SRC

** lsp-mode
To allow great completions and others nice features when editing
source code, =lsp-mode= is good to have. It allows Emacs to talk to
various language servers like =clangd= for C/C++ or =rust-analyzer=
for Rust.
#+BEGIN_SRC emacs-lisp
    (use-package lsp-mode
      :init
      (setq lsp-keymap-prefix "C-c l")
      :hook ((c-mode c++-mode cmake-mode) . lsp-deferred)
      :commands (lsp lsp-deferred)
      :config
      (require 'lsp-ido)
      (lsp-enable-which-key-integration t))
#+END_SRC

** company-mode
I prefer =C-n= and =C-p= to navigate around the items.
#+BEGIN_SRC emacs-lisp
  ;; https://itecnote.com/tecnote/about-the-fix-for-the-interference-between-company-mode-and-yasnippet/
  (defun jl/company-yasnippet-or-completion ()
    "Try to expand a snippet at point or complete with company"
    (interactive)
    (let ((yas-fallback-behavior nil))
      (unless (yas-expand)
        (call-interactively #'company-complete-common))))

  (defun jl/company-complete-common ()
    "Replacement of `company-complete-common' with `jl/company-yasnippet-or-competion'"
    (interactive)
    (substitute-key-definition 'company-complete-common
                               'jl/company-yasnippet-or-completion
                               company-active-map))

  (use-package company
    :ensure t
    :hook ((emacs-lisp-mode . (lambda ()
                                (setq-local company-backend 'company-elisp)))
           (sh-mode . (lambda ()
                        (setq-local company-backend 'company-shell)))
           ((emacs-lisp-mode sh-mode python-mode) . company-mode)
           (cmake-mode . company-mode)
           (company-mode . jl/company-complete-common))
    :bind (("M-<tab>" . 'company-complete)
           :map company-active-map
           ("M-n" . nil)
           ("M-p" . nil)
           ("C-n" . 'company-select-next)
           ("C-p" . 'company-select-previous))
    :config
    (setq company-idle-delay 0.1
          company-minimum-prefix-length 1)
    (global-set-key (kbd "TAB") #'company-indent-or-complete-common))

  (use-package company-quickhelp
    :config
    (company-quickhelp-mode))
#+END_SRC

** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :after (rust-mode)
    :hook ((shell-mode python-mode) . flycheck-mode)
    :diminish)
#+END_SRC

** Programming style
*** Style
#+BEGIN_SRC emacs-lisp
  ;; (setq-default c-default-style "gnu"
  ;;               c-basic-offset 2)
  (use-package format-all
    :hook ((prog-mode . format-all-mode)
           (format-all-mode . format-all-ensure-formatter)))
#+END_SRC

*** Automatic detection of the indentation style
#+BEGIN_SRC emacs-lisp
  (use-package dtrt-indent
    :config
    (dtrt-indent-global-mode 1))
#+END_SRC

*** Display an indicator for the fill column
#+BEGIN_SRC emacs-lisp
  (setq-default display-fill-column-indicator-column 80)
  (add-hook 'prog-mode-hook 'display-fill-column-indicator-mode)
  (global-visual-line-mode)
#+END_SRC

** Specific languages
*** C/C++
**** gdb
Display almost all debugging windows when gdb is called with =-i=mi=
option.
#+BEGIN_SRC emacs-lisp
  (setq gdb-many-windows t)
#+END_SRC

**** cmake-mode
#+BEGIN_SRC emacs-lisp
  (use-package cmake-mode)
#+END_SRC

**** ggtags
Alternatively to =rtags=, you can use =ggtags= with a tagging system
like [[https://gnu.org/software/global/][=global=]] or [[https://ctags.io][=ctags=]].
#+BEGIN_SRC emacs-lisp
  (use-package ggtags
    ;; :hook ((c-mode c++-mode java-mode asm-mode) . ggtags-mode)
    :bind (:map ggtags-mode-map
                ("C-c g s" . ggtags-find-other-symbol)
                ("C-c g h" . ggtags-view-tag-history)
                ("C-c g r" . ggtags-find-reference)
                ("C-c g d" . ggtags-find-definition)
                ("C-c g f" . ggtags-find-file)
                ("C-c g c" . ggtags-create-tags)
                ("C-c g u" . ggtags-update-tags)
                ("C-c g g" . ggtags-grep)
                ("C-c g C-s" . ggtags-find-tag-regexp)
                ("C-c g M-%" . ggtags-query-replace)
                ("M-," . pop-tag-mark)))
#+END_SRC

**** GLSL
#+BEGIN_SRC emacs-lisp
  (use-package glsl-mode
    :ensure t)
#+END_SRC

*** Rust
**** rust-mode
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :bind (:map rust-mode-map
           ("<tab>" . #'company-indent-or-complete-common))
    :hook ((rust-mode) . (lambda () (setq indent-tabs-mode nil)))
    :config
    (setq rust-format-mode-on-save t)
    ;; (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
    (setq company-tooltip-align-annotations t))
    ;; (add-hook 'rust-mode-hook
    ;;           (lambda () (setq indent-tabs-mode nil))))
#+END_SRC

**** rustfmt
#+BEGIN_SRC emacs-lisp
  (setq rust-format-on-save t)
#+END_SRC

**** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-rust
    :after (flycheck rust-mode)
    :hook (((flycheck-mode) . flycheck-rust-setup)
           ((rust-mode) . flycheck-mode)))
#+END_SRC

**** cargo
#+BEGIN_SRC emacs-lisp
  (use-package cargo
    :after (rust-mode)
    :hook (rust-mode . cargo-minor-mode))
#+END_SRC

**** racer
#+BEGIN_SRC emacs-lisp
  (use-package racer
    :hook ((rust-mode . racer-mode)
           (racer-mode . eldoc-mode)
           (racer-mode . company-mode)))
#+END_SRC

**** company
#+BEGIN_SRC emacs-lisp
  (use-package company-racer)
#+END_SRC

*** Emacs Lisp
**** eldoc
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
#+END_SRC

*** Scheme
Use GNU Guile as the interpreter.
#+BEGIN_SRC emacs-lisp
  (setq scheme-program-name "guile")
#+END_SRC

*** Haskell
**** haskell-mode
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :bind (:map haskell-mode-map
                ("C-c C-c" . haskell-compile)
                ("C-c C-l" . haskell-process-load-or-reload)
                ("C-`" . haskell-interactive-bring)
                ("C-c C-t" . haskell-process-do-type)
                ("C-c C-i" . haskell-process-do-info)
                ("C-c c" . haskell-process-cabal))
    :hook ((haskell-mode . interactive-haskell-mode)))
           ;; (haskell-mode . hindent-mode)))
#+END_SRC

**** hindent
#+BEGIN_SRC emacs-lisp
  (use-package hindent
    :config
    (setq hindent-reformat-buffer-on-save t))
#+END_SRC

*** Shell scripting
**** company
#+BEGIN_SRC emacs-lisp
  (use-package company-shell)
#+END_SRC

*** Python
**** company
#+BEGIN_SRC emacs-lisp
  (use-package company-jedi
    :hook (python-mode . jedi:setup))
#+END_SRC

* Org
** Auto tangling
#+BEGIN_SRC emacs-lisp
  (use-package org-auto-tangle
    :hook (org-mode . org-auto-tangle-mode)
    :config
    (setq org-auto-tangle-default t))
#+END_SRC

** Completion
#+BEGIN_SRC emacs-lisp
  (defun add-pcomplete-to-capf ()
    (add-hook 'completion-at-point-functions 'pcomplete-completions-at-point nil t))

  (add-hook 'org-mode-hook #'add-pcomplete-to-capf)
#+END_SRC
** Common settings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)

  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-src-window-setup 'current-window)

  (add-hook 'org-mode-hook 'org-indent-mode)
  (add-hook 'org-mode-hook 'auto-fill-mode)
#+END_SRC

Allow =babel= to execute Emacs lisp, Shell, Python code.
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)
     (python . t)))
#+END_SRC

Don't ask before evaluating code blocks.
#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

** Exporting
Allow export to beamer (for presentations).
#+BEGIN_SRC emacs-lisp
  (require 'ox-beamer)
#+END_SRC

*** Exporting to HTML
Don't include a footer with my contact and publishing information.
#+BEGIN_SRC emacs-lisp
  (setq org-html-postamble nil)
#+END_SRC

**** emacs-htmlize 
#+BEGIN_SRC emacs-lisp
  (use-package htmlize)
#+END_SRC

**** ox-twbs
#+BEGIN_SRC emacs-lisp
  (use-package ox-twbs)
#+END_SRC

*** Exporting to PDF
This will allow syntax highlighting in the code in PDFs. I use the
=minted= package, but if it shells out to =pygments= to do the actual
work.
=pdflatex= usually disallows shell command so this will enables that :
#+BEGIN_SRC emacs-lisp
  (setq org-latex-pdf-process
        '("xelatex --shell-escape -interaction nonstopmode -output-directory %o %f"
          "xelatex --shell-escape -interaction nonstopmode -output-directory %o %f"
          "xelatex --shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex --shell-escape --batch %f"))
#+END_SRC

Include the =minted= package in all my LaTeX exports.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)
#+END_SRC

*** TeX configuration
Automatically parse the file after loading it.
#+BEGIN_SRC emacs-lisp
  (setq TeX-parse-self t)
#+END_SRC

Always use =pdflatex= when compiling LaTeX documents.
#+BEGIN_SRC emacs-lisp
  (setq TeX-PDF-mode t)
#+END_SRC
